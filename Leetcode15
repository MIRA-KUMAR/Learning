class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:

        # TN: O(n2+ nlogn)
        nums.sort()                     # O(nlogn)
        self.res = []

        def twoSum(i):
            l, r = i+1, len(nums) - 1
            while l < r:
                s = nums[l] + nums[r] + nums[i]
                if s > 0:
                    r -= 1
                elif s < 0:
                    l += 1
                else:
                    self.res.append((nums[i], nums[l], nums[r]))
                    l += 1
                    r -= 1
                    while l < r and nums[l] == nums[l - 1]:
                        l += 1

        for i in range(len(nums)):                  # O(n2)
            if nums[i] > 0:
                break
            if i == 0 or nums[i] != nums[i - 1]:
                twoSum(i)
        return self.res


"""class Solution:
    def threeSum(self, nums):

        # TN : O(nlogn + n2)

        nums.sort()
        res = set()

        def helper(i):
            l, r = i + 1, len(nums) - 1
            while l < r:
                s = nums[i] + nums[l] + nums[r]
                if s == 0:
                    res.add((nums[i], nums[l], nums[r]))
                    r -= 1
                    l += 1
                    while l < r and nums[l] == nums[l - 1]:
                        l += 1

                elif s > 0:
                    r -= 1
                else:
                    l += 1

        for i in range(len(nums)):
            if nums[i] > 0:
                break
            helper(i)

        return res



def threeSum(nums):


    # Three pointers
    res = []
    nums.sort()
    for i in range(len(nums)):
        if nums[i] > 0:
            break
        elif i == 0 or nums[i] != nums[i-1]:
            threeSumII(nums, i, res)

    return res

def threeSumII(nums, i, res):

    lo, hi = i+1, len(nums) - 1
    while lo < hi:
        comp = nums[i] + nums[lo] + nums[hi]
        if comp < 0:
            lo += 1
        elif comp > 0:
            hi -= 1
        else:
            res.append([nums[i], nums[lo], nums[hi]])
            lo += 1
            hi -= 1
            while lo < hi and nums[lo] == nums[lo-1]:
                lo += 1

 # Hashset:
 res = []
  nums.sort()
   for i in range(len(nums)):
        if nums[i] > 0:
            break
        elif i == 0 or nums[i] != nums[i-1]:
            threeSumII(nums, i, res)

    return res


def threeSumII(nums, i, res):
    seen = set()
    j = i + 1
    while j < len(nums):
        comp = - nums[i] - nums[j]
        if comp in seen:
            res.append([nums[i], nums[j], comp])

            while j+1 < len(nums) and nums[j] == nums[j+1]:
                j += 1
        seen.add(nums[j])
        j += 1


print(threeSum(nums=[-1, 0, 1, 2, -1, -4]))
"""
