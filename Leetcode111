# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    """Iterative method:"""
    # def minDepth(self, root: Optional[TreeNode]) -> int:
        
    #     if not root:
    #         return 0
        
    #     children = [root.left, root.right]
    #     if not any(children):
    #         return 1
        
    #     min_depth = float('inf')    #infintely large number
        
    #     for c in children:
    #         if c:
    #             min_depth = min(self.minDepth(c), min_depth)
        
    #     return min_depth + 1
    
    
    """DFS Method:"""
    def minDepth(self, root):
        
        if not root:
            return 0
        
        stack, min_depth = [(1, root),], float('inf')
        
        while stack:
            depth, root = stack.pop()
            root = TreeNode(root)
            children = [root.left, root.right]
            if not any(children):
                min_depth = min(depth, min_depth)
            for c in children:
                if c:
                    stack.append((depth + 1, c))
        return min_depth

sol_ins = Solution()
root = [3,9,20,None,None,15,7]
print(sol_ins.minDepth(root))                   