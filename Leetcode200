import collections


def bfs(r, c, visit, grid, ROWS, COLS):

    q = collections.deque()
    q.append((r, c))
    visit.add((r, c))

    while q:
        row, col = q.popleft()
        directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]
        for dr, dc in directions:
            r, c = row + dr, col + dc
            if r in range(ROWS) and c in range(COLS) and grid[r][c] == '1' and (r, c) not in visit:
                q.append((r, c))
                visit.add((r, c))


def numIslands(grid):

    ROWS, COLS = len(grid), len(grid[0])
    islands = 0
    visit = set()
    for r in range(ROWS):
        for c in range(COLS):
            if grid[r][c] == '1' and (r, c) not in visit:
                bfs(r, c, visit, grid, ROWS, COLS)
                islands += 1

    return islands


print(numIslands(grid=[
    ["1", "1", "1", "1", "0"],
    ["1", "1", "0", "1", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "0", "0", "0"]
]))

print(numIslands(grid=[
    ["1", "1", "0", "0", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "1", "0", "0"],
    ["0", "0", "0", "1", "1"]
]))
