# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        # Using set
        """if not head:
            return False
        s = set()
        while head:
            if head in s:
                return True
            s.add(head)
            head = head.next
        return False"""

        # Using Floyd's cycle
        if not head or not head.next:
            return False
        slow = head
        fast = head.next
        while slow != fast:

            if fast == None or fast.next == None:
                return False
            slow = slow.next
            fast = fast.next.next
        return True
